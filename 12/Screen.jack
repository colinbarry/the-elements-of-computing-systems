// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array bitmask;
    static int base;

    /** Initializes the Screen. */
    function void init() {
        var int i, mask;

        let color = true;
        let base = 16384;

        let bitmask = Array.new(16);
        let mask = 1;
        while (i < 16) {
            let bitmask[i] = mask;
            let mask = mask + mask;
            let i = i + 1;
        }   

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int from, to;

        let from = base;
        let to = base + (32 * 256);

        while (from < to) {
            do Memory.poke(from, 0);
            let from = from + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, offset;

        let addr = base + (y * 32) + (x / 16);
        let offset = x - ((x / 16) * 16);

        if (color) {
            do Memory.poke(addr, Memory.peek(addr) | bitmask[offset]);
        } else {
            do Memory.poke(addr, Memory.peek(addr) & ~bitmask[offset]);
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, adyMinusbdx;
        var int tmp;

        if (y1 = y2) {
            let a = Math.min(x1, x2);
            let b = Math.max(x1, x2);

            while (a < b) {
                do Screen.drawPixel(a, y1);
                let a = a + 1;
            }
            return;
        } 

        if (x1 = x2) {
            let a = Math.min(y1, y2);
            let b = Math.max(y1, y2);

            while (a < b) {
                do Screen.drawPixel(x1, a);
                let a = a + 1;
            }
            return;
        }

        if (x2 < x1) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

        if ((dx = 0) | (dy = 0)) {
            return; // @todo deal with these cases
        }

        if (dy > 0) {
            while (~(a > dx) & ~(b > dy)) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (adyMinusbdx < 0) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx + dy;
                } else {
                    let b = b + 1;
                    let adyMinusbdx = adyMinusbdx - dx;
                }
            }
        } else {
            let dy = -dy;
            while (~(a > dx) & ~(b > dy)) {
                do Screen.drawPixel(x1 + a, y1 - b);
                if (adyMinusbdx < 0) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx + dy;
                } else {
                    let b = b + 1;
                    let adyMinusbdx = adyMinusbdx - dx;
                }
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;

        let y = y1;

        while (y < y2) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int len, x0, x1;
        var int dy;

        let dy = -r;

        while (dy < r) {
            let len = Math.sqrt((r * r) - (dy * dy)); 
            do Screen.drawLine(x - len, y + dy, x + len, y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
