// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    /** Bitmask for selecting the nth bit as Jack has no native bitmasking
     * operations
     */
    static Array bitmask;

    /** Initializes the library. */
    function void init() {
        var int i, mask;

        let bitmask = Array.new(16);
        let mask = 1;
        while (i < 16) {
            let bitmask[i] = mask;
            let mask = mask + mask;
            let i = i + 1;
        }   

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) { 
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, i;

        if (x = 0 | y = 0) {
            return 0;
        }

        let i = 0;
        let sum = 0;
        while (i < 16) {
            if (y & bitmask[i]) {
                let sum = sum + x;
            }
            let x = x + x;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, acc, i, bit, sign;

        if (x = 0 | y = 0 | Math.abs(y) > Math.abs(x)) {
            return 0;
        }

        // if either x or y is -ve, replace with the absolute value
        // and then put the correct sign on the quotient after calculation.
        let sign = 1;
        if (x < 0) {
            let x = -x;
            let sign = -sign;
        } 

        if (y < 0) {
            let y = -y;
            let sign = -sign;
        } 

        let q = 0;
        let acc = 0;
        let i = 15;
        while (i > -1) {
            let q = q + q;
            let acc = acc + acc;
            let bit = x & bitmask[i];
            if (bit) {
                let acc = acc | 1;
            }

            if (~(acc < y)) {
                let q = q | 1;
                let acc = acc -y;
            }

            let i = i - 1;
        }
        
        if (sign > 0) {
            return q;
        } else {
            return -q;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, tmp, tmpsquared;

        let y = 0;
        let j = 7;

        while (~(j < 0)) {
            let tmp = y + bitmask[j];
            let tmpsquared = tmp * tmp;
            // additional check for overflow here
            if (~(tmpsquared > x) & (tmpsquared > 0)) {
                 let y = tmp;
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
